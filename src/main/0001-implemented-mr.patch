From b610e92a92789eb4b05bb7839373407bcb8e4043 Mon Sep 17 00:00:00 2001
From: Sujay Lokesh <sl5202@nyu.edu>
Date: Sun, 9 Feb 2020 20:24:47 -0500
Subject: [PATCH] implemented mr

---
 src/main/wc.go | 40 +++++++++++++++++++++++++++++++++++-----
 1 file changed, 35 insertions(+), 5 deletions(-)

diff --git a/src/main/wc.go b/src/main/wc.go
index 3846bad..9dc161f 100644
--- a/src/main/wc.go
+++ b/src/main/wc.go
@@ -1,10 +1,15 @@
 package main
+//NYU Net ID : SL5202
+//NYU Email ID : sl5202@nyu.edu
 
-import "os"
-import "fmt"
-import "mapreduce"
-
-import "container/list"
+import (
+	"os"
+	"fmt"
+	"mapreduce"
+	"container/list"
+	"unicode"
+	"strings"
+)
 
 // our simplified version of MapReduce does not supply a
 // key to the Map function, as in the paper; only a value,
@@ -12,12 +17,37 @@ import "container/list"
 // value should be a list of key/value pairs, each represented
 // by a mapreduce.KeyValue.
 func Map(value string) *list.List {
+	f := func(c rune) bool {
+		return !unicode.IsLetter(c)
+	}
+	words := strings.FieldsFunc(value,f)
+	values := list.New()
+	var pair mapreduce.KeyValue
+	for _,j := range words{
+		pair.Key = j
+		pair.Value = "1"
+		values.PushFront(pair)
+
+	}
+	//for e := values.Front(); e != nil; e = e.Next() {
+	//	fmt.Println(e.Value)
+	//}
+	return values
 }
 
 // called once for each key generated by Map, with a list
 // of that key's string value. should return a single
 // output value for that key.
 func Reduce(key string, values *list.List) string {
+	var sum = 0
+	for e := values.Front(); e != nil; e = e.Next() {
+		var i int
+		if _, err := fmt.Sscan(e.Value.(string), &i); err == nil{
+			sum +=i
+		}
+	}
+	s := fmt.Sprintf("%d", sum)
+	return s
 }
 
 // Can be run in 3 ways:
-- 
2.15.1

