// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: commonpb.proto

package web

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Re string `protobuf:"bytes,1,opt,name=re,proto3" json:"re,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetRe() string {
	if x != nil {
		return x.Re
	}
	return ""
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message int64 `protobuf:"varint,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{1}
}

func (x *Reply) GetMessage() int64 {
	if x != nil {
		return x.Message
	}
	return 0
}

var File_commonpb_proto protoreflect.FileDescriptor

var file_commonpb_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x77, 0x65, 0x62, 0x22, 0x19, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x65,
	0x22, 0x21, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0xa6, 0x09, 0x0a, 0x03, 0x57, 0x65, 0x62, 0x12, 0x2b, 0x0a, 0x0d, 0x73,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x77,
	0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x77,
	0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x12, 0x73,
	0x68, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a,
	0x11, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2e,
	0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0c, 0x2e, 0x77, 0x65,
	0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x57,
	0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x6f,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0c,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77,
	0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68,
	0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x0c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05,
	0x2e, 0x3b, 0x77, 0x65, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonpb_proto_rawDescOnce sync.Once
	file_commonpb_proto_rawDescData = file_commonpb_proto_rawDesc
)

func file_commonpb_proto_rawDescGZIP() []byte {
	file_commonpb_proto_rawDescOnce.Do(func() {
		file_commonpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonpb_proto_rawDescData)
	})
	return file_commonpb_proto_rawDescData
}

var file_commonpb_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_commonpb_proto_goTypes = []interface{}{
	(*Request)(nil), // 0: web.request
	(*Reply)(nil),   // 1: web.reply
}
var file_commonpb_proto_depIdxs = []int32{
	0,  // 0: web.Web.showIndexPage:input_type -> web.request
	0,  // 1: web.Web.showLoginPage:input_type -> web.request
	0,  // 2: web.Web.showLoginSuccess:input_type -> web.request
	0,  // 3: web.Web.showLoginFailed:input_type -> web.request
	0,  // 4: web.Web.showRegistrationPage:input_type -> web.request
	0,  // 5: web.Web.showRegisterSuccess:input_type -> web.request
	0,  // 6: web.Web.showRegisterFailed:input_type -> web.request
	0,  // 7: web.Web.showFollowSuccess:input_type -> web.request
	0,  // 8: web.Web.showFollowFailed:input_type -> web.request
	0,  // 9: web.Web.showUnfollowSuccess:input_type -> web.request
	0,  // 10: web.Web.showUnfollowFailed:input_type -> web.request
	0,  // 11: web.Web.showFollowPage:input_type -> web.request
	0,  // 12: web.Web.showFollowPageEmpty:input_type -> web.request
	0,  // 13: web.Web.showFollowPageError:input_type -> web.request
	0,  // 14: web.Web.showWelcomePage:input_type -> web.request
	0,  // 15: web.Web.showHomePage:input_type -> web.request
	0,  // 16: web.Web.showHomePageEmpty:input_type -> web.request
	0,  // 17: web.Web.showArticleCreationPage:input_type -> web.request
	0,  // 18: web.Web.showSearchArticlesPage:input_type -> web.request
	0,  // 19: web.Web.showSearchArticleError:input_type -> web.request
	0,  // 20: web.Web.showArticle:input_type -> web.request
	0,  // 21: web.Web.showUserArticle:input_type -> web.request
	0,  // 22: web.Web.showUserArticleError:input_type -> web.request
	0,  // 23: web.Web.showCreateArticleSuccess:input_type -> web.request
	1,  // 24: web.Web.showIndexPage:output_type -> web.reply
	1,  // 25: web.Web.showLoginPage:output_type -> web.reply
	1,  // 26: web.Web.showLoginSuccess:output_type -> web.reply
	1,  // 27: web.Web.showLoginFailed:output_type -> web.reply
	1,  // 28: web.Web.showRegistrationPage:output_type -> web.reply
	1,  // 29: web.Web.showRegisterSuccess:output_type -> web.reply
	1,  // 30: web.Web.showRegisterFailed:output_type -> web.reply
	1,  // 31: web.Web.showFollowSuccess:output_type -> web.reply
	1,  // 32: web.Web.showFollowFailed:output_type -> web.reply
	1,  // 33: web.Web.showUnfollowSuccess:output_type -> web.reply
	1,  // 34: web.Web.showUnfollowFailed:output_type -> web.reply
	1,  // 35: web.Web.showFollowPage:output_type -> web.reply
	1,  // 36: web.Web.showFollowPageEmpty:output_type -> web.reply
	1,  // 37: web.Web.showFollowPageError:output_type -> web.reply
	1,  // 38: web.Web.showWelcomePage:output_type -> web.reply
	1,  // 39: web.Web.showHomePage:output_type -> web.reply
	1,  // 40: web.Web.showHomePageEmpty:output_type -> web.reply
	1,  // 41: web.Web.showArticleCreationPage:output_type -> web.reply
	1,  // 42: web.Web.showSearchArticlesPage:output_type -> web.reply
	1,  // 43: web.Web.showSearchArticleError:output_type -> web.reply
	1,  // 44: web.Web.showArticle:output_type -> web.reply
	1,  // 45: web.Web.showUserArticle:output_type -> web.reply
	1,  // 46: web.Web.showUserArticleError:output_type -> web.reply
	1,  // 47: web.Web.showCreateArticleSuccess:output_type -> web.reply
	24, // [24:48] is the sub-list for method output_type
	0,  // [0:24] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_commonpb_proto_init() }
func file_commonpb_proto_init() {
	if File_commonpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commonpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonpb_proto_goTypes,
		DependencyIndexes: file_commonpb_proto_depIdxs,
		MessageInfos:      file_commonpb_proto_msgTypes,
	}.Build()
	File_commonpb_proto = out.File
	file_commonpb_proto_rawDesc = nil
	file_commonpb_proto_goTypes = nil
	file_commonpb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebClient interface {
	// user
	ShowIndexPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowLoginPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowLoginSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowLoginFailed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowRegistrationPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowRegisterSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowRegisterFailed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowFollowSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowFollowFailed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowUnfollowSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowUnfollowFailed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowFollowPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowFollowPageEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowFollowPageError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	//article
	ShowWelcomePage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowHomePage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowHomePageEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowArticleCreationPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowSearchArticlesPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowSearchArticleError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowArticle(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowUserArticle(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowUserArticleError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	ShowCreateArticleSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) ShowIndexPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showIndexPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowLoginPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showLoginPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowLoginSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showLoginSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowLoginFailed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showLoginFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowRegistrationPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showRegistrationPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowRegisterSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showRegisterSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowRegisterFailed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showRegisterFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowFollowSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showFollowSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowFollowFailed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showFollowFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowUnfollowSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showUnfollowSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowUnfollowFailed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showUnfollowFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowFollowPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showFollowPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowFollowPageEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showFollowPageEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowFollowPageError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showFollowPageError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowWelcomePage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showWelcomePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowHomePage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showHomePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowHomePageEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showHomePageEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowArticleCreationPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showArticleCreationPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowSearchArticlesPage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showSearchArticlesPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowSearchArticleError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showSearchArticleError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowArticle(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowUserArticle(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showUserArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowUserArticleError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showUserArticleError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ShowCreateArticleSuccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/web.Web/showCreateArticleSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServer is the server API for Web service.
type WebServer interface {
	// user
	ShowIndexPage(context.Context, *Request) (*Reply, error)
	ShowLoginPage(context.Context, *Request) (*Reply, error)
	ShowLoginSuccess(context.Context, *Request) (*Reply, error)
	ShowLoginFailed(context.Context, *Request) (*Reply, error)
	ShowRegistrationPage(context.Context, *Request) (*Reply, error)
	ShowRegisterSuccess(context.Context, *Request) (*Reply, error)
	ShowRegisterFailed(context.Context, *Request) (*Reply, error)
	ShowFollowSuccess(context.Context, *Request) (*Reply, error)
	ShowFollowFailed(context.Context, *Request) (*Reply, error)
	ShowUnfollowSuccess(context.Context, *Request) (*Reply, error)
	ShowUnfollowFailed(context.Context, *Request) (*Reply, error)
	ShowFollowPage(context.Context, *Request) (*Reply, error)
	ShowFollowPageEmpty(context.Context, *Request) (*Reply, error)
	ShowFollowPageError(context.Context, *Request) (*Reply, error)
	//article
	ShowWelcomePage(context.Context, *Request) (*Reply, error)
	ShowHomePage(context.Context, *Request) (*Reply, error)
	ShowHomePageEmpty(context.Context, *Request) (*Reply, error)
	ShowArticleCreationPage(context.Context, *Request) (*Reply, error)
	ShowSearchArticlesPage(context.Context, *Request) (*Reply, error)
	ShowSearchArticleError(context.Context, *Request) (*Reply, error)
	ShowArticle(context.Context, *Request) (*Reply, error)
	ShowUserArticle(context.Context, *Request) (*Reply, error)
	ShowUserArticleError(context.Context, *Request) (*Reply, error)
	ShowCreateArticleSuccess(context.Context, *Request) (*Reply, error)
}

// UnimplementedWebServer can be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (*UnimplementedWebServer) ShowIndexPage(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowIndexPage not implemented")
}
func (*UnimplementedWebServer) ShowLoginPage(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowLoginPage not implemented")
}
func (*UnimplementedWebServer) ShowLoginSuccess(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowLoginSuccess not implemented")
}
func (*UnimplementedWebServer) ShowLoginFailed(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowLoginFailed not implemented")
}
func (*UnimplementedWebServer) ShowRegistrationPage(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRegistrationPage not implemented")
}
func (*UnimplementedWebServer) ShowRegisterSuccess(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRegisterSuccess not implemented")
}
func (*UnimplementedWebServer) ShowRegisterFailed(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRegisterFailed not implemented")
}
func (*UnimplementedWebServer) ShowFollowSuccess(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFollowSuccess not implemented")
}
func (*UnimplementedWebServer) ShowFollowFailed(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFollowFailed not implemented")
}
func (*UnimplementedWebServer) ShowUnfollowSuccess(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUnfollowSuccess not implemented")
}
func (*UnimplementedWebServer) ShowUnfollowFailed(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUnfollowFailed not implemented")
}
func (*UnimplementedWebServer) ShowFollowPage(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFollowPage not implemented")
}
func (*UnimplementedWebServer) ShowFollowPageEmpty(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFollowPageEmpty not implemented")
}
func (*UnimplementedWebServer) ShowFollowPageError(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFollowPageError not implemented")
}
func (*UnimplementedWebServer) ShowWelcomePage(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowWelcomePage not implemented")
}
func (*UnimplementedWebServer) ShowHomePage(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHomePage not implemented")
}
func (*UnimplementedWebServer) ShowHomePageEmpty(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHomePageEmpty not implemented")
}
func (*UnimplementedWebServer) ShowArticleCreationPage(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowArticleCreationPage not implemented")
}
func (*UnimplementedWebServer) ShowSearchArticlesPage(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSearchArticlesPage not implemented")
}
func (*UnimplementedWebServer) ShowSearchArticleError(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSearchArticleError not implemented")
}
func (*UnimplementedWebServer) ShowArticle(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowArticle not implemented")
}
func (*UnimplementedWebServer) ShowUserArticle(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUserArticle not implemented")
}
func (*UnimplementedWebServer) ShowUserArticleError(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUserArticleError not implemented")
}
func (*UnimplementedWebServer) ShowCreateArticleSuccess(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCreateArticleSuccess not implemented")
}

func RegisterWebServer(s *grpc.Server, srv WebServer) {
	s.RegisterService(&_Web_serviceDesc, srv)
}

func _Web_ShowIndexPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowIndexPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowIndexPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowIndexPage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowLoginPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowLoginPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowLoginPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowLoginPage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowLoginSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowLoginSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowLoginSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowLoginSuccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowLoginFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowLoginFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowLoginFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowLoginFailed(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowRegistrationPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowRegistrationPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowRegistrationPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowRegistrationPage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowRegisterSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowRegisterSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowRegisterSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowRegisterSuccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowRegisterFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowRegisterFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowRegisterFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowRegisterFailed(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowFollowSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowFollowSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowFollowSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowFollowSuccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowFollowFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowFollowFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowFollowFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowFollowFailed(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowUnfollowSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowUnfollowSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowUnfollowSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowUnfollowSuccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowUnfollowFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowUnfollowFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowUnfollowFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowUnfollowFailed(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowFollowPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowFollowPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowFollowPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowFollowPage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowFollowPageEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowFollowPageEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowFollowPageEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowFollowPageEmpty(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowFollowPageError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowFollowPageError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowFollowPageError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowFollowPageError(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowWelcomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowWelcomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowWelcomePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowWelcomePage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowHomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowHomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowHomePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowHomePage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowHomePageEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowHomePageEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowHomePageEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowHomePageEmpty(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowArticleCreationPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowArticleCreationPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowArticleCreationPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowArticleCreationPage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowSearchArticlesPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowSearchArticlesPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowSearchArticlesPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowSearchArticlesPage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowSearchArticleError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowSearchArticleError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowSearchArticleError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowSearchArticleError(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowArticle(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowUserArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowUserArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowUserArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowUserArticle(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowUserArticleError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowUserArticleError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowUserArticleError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowUserArticleError(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ShowCreateArticleSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ShowCreateArticleSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.Web/ShowCreateArticleSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ShowCreateArticleSuccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Web_serviceDesc = grpc.ServiceDesc{
	ServiceName: "web.Web",
	HandlerType: (*WebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "showIndexPage",
			Handler:    _Web_ShowIndexPage_Handler,
		},
		{
			MethodName: "showLoginPage",
			Handler:    _Web_ShowLoginPage_Handler,
		},
		{
			MethodName: "showLoginSuccess",
			Handler:    _Web_ShowLoginSuccess_Handler,
		},
		{
			MethodName: "showLoginFailed",
			Handler:    _Web_ShowLoginFailed_Handler,
		},
		{
			MethodName: "showRegistrationPage",
			Handler:    _Web_ShowRegistrationPage_Handler,
		},
		{
			MethodName: "showRegisterSuccess",
			Handler:    _Web_ShowRegisterSuccess_Handler,
		},
		{
			MethodName: "showRegisterFailed",
			Handler:    _Web_ShowRegisterFailed_Handler,
		},
		{
			MethodName: "showFollowSuccess",
			Handler:    _Web_ShowFollowSuccess_Handler,
		},
		{
			MethodName: "showFollowFailed",
			Handler:    _Web_ShowFollowFailed_Handler,
		},
		{
			MethodName: "showUnfollowSuccess",
			Handler:    _Web_ShowUnfollowSuccess_Handler,
		},
		{
			MethodName: "showUnfollowFailed",
			Handler:    _Web_ShowUnfollowFailed_Handler,
		},
		{
			MethodName: "showFollowPage",
			Handler:    _Web_ShowFollowPage_Handler,
		},
		{
			MethodName: "showFollowPageEmpty",
			Handler:    _Web_ShowFollowPageEmpty_Handler,
		},
		{
			MethodName: "showFollowPageError",
			Handler:    _Web_ShowFollowPageError_Handler,
		},
		{
			MethodName: "showWelcomePage",
			Handler:    _Web_ShowWelcomePage_Handler,
		},
		{
			MethodName: "showHomePage",
			Handler:    _Web_ShowHomePage_Handler,
		},
		{
			MethodName: "showHomePageEmpty",
			Handler:    _Web_ShowHomePageEmpty_Handler,
		},
		{
			MethodName: "showArticleCreationPage",
			Handler:    _Web_ShowArticleCreationPage_Handler,
		},
		{
			MethodName: "showSearchArticlesPage",
			Handler:    _Web_ShowSearchArticlesPage_Handler,
		},
		{
			MethodName: "showSearchArticleError",
			Handler:    _Web_ShowSearchArticleError_Handler,
		},
		{
			MethodName: "showArticle",
			Handler:    _Web_ShowArticle_Handler,
		},
		{
			MethodName: "showUserArticle",
			Handler:    _Web_ShowUserArticle_Handler,
		},
		{
			MethodName: "showUserArticleError",
			Handler:    _Web_ShowUserArticleError_Handler,
		},
		{
			MethodName: "showCreateArticleSuccess",
			Handler:    _Web_ShowCreateArticleSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commonpb.proto",
}
